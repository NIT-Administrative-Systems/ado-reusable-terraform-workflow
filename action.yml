name: 'Northwestern Terraform Workflow'
description: 'Composite actions of common steps for IAC with Northwestern'
inputs:
  run-apply:
    description: 'Whether or not to run terraform apply'
    required: true
    default: 'false'
  terraform-version:
    description: 'Version of terraform to use'
    required: true
    default: '0.12.31'
  iac-path:
    description: 'relative path to your IAC folder'
    required: true
    default: 'develop'
outputs:
  terraform-outputs:
    description: "Outputs from the terraform apply"
    value: ${{ steps.tf-apply.outputs.terraform-outputs }}
runs:
  using: "composite"
  steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Cache Comment Id
        id: cache-comment-id
        uses: actions/cache@v2.1.7
        with:
          path: comment-id
          key: pr-comment-id

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          cd ${{ inputs.iac-path }}
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ inputs.iac-path }}
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ inputs.iac-path }}
          terraform plan -no-color
        continue-on-error: true

      - name: Update PR Comment with Plan
        if: steps.cache-comment-id.outputs.cache-hit == 'true'
        id: update-pr-comment
        uses: actions/github-script@v5
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            console.log("Context: ")
            console.log(context)
            const fs = require('fs')
            console.log(fs)

            let commentId = await fs.readFileSync('comment-id', 'utf8')
            console.log("ComId: " + commentId)

            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details>
            <summary>Show Plan</summary>
            \`\`\`\
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Auth: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.updateComment({
               comment_id: commentId,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: output
            })

      - name: Create PR Comment with Plan
        if: steps.cache-comment-id.outputs.cache-hit != 'true'
        id: create-pr-comment
        uses: actions/github-script@v5
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details>
            <summary>Show Plan</summary>
            \`\`\`\
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Auth: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
             
            const result = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            console.log('Create comment Comment Id: ' + result.data.id)
            await exec.exec('echo ', [result.data.id, '>', 'comment-id']);

            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: tf-apply
        if: ${{ inputs.run-apply }} == 'true'
        run: |
          cd ${{ inputs.iac-path }}
          terraform init
          terraform apply -auto-approve
          
          echo "::set-output name=terraform-outputs::$(terraform output -json)"
