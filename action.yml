name: 'Northwestern Terraform Workflow'
description: 'Composite actions of common steps for IAC with Northwestern'
inputs:
  run-apply:
    description: 'Whether or not to run terraform apply'
    required: true
    default: 'false'
  terraform-version:
    description: 'Version of terraform to use'
    required: true
    default: '0.12.31'
  iac-path:
    description: 'relative path to your IAC folder'
    required: false
    default: '0.12.31'
outputs:
  terraform-outputs:
    description: "Outputs from the terraform apply"
    value: ${{ steps.tf-apply.outputs.terraform-outputs }}
runs:
  using: "composite"
  steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          cd ${{ inputs.iac-path }}
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ inputs.iac-path }}
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ inputs.iac-path }}
          terraform plan -no-color
        continue-on-error: true

      - name: Update PR Comment with Plan
        uses: actions/github-script@v5
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <!-- tfCommentFinder -->
            <details>
            <summary>Show Plan</summary>
            \`\`\`\
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Auth: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            const prComments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })
             let existingComment = prComments.data.find((comment) => { 
                return comment.body.includes("tfCommentFinder")
             })
             
             //use id to replace/update the commnet, else create...
             if(existingComment) {
               github.rest.issues.updateComment({
                 comment_id: existingComment.id,
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 body: output
               })
             }
             else {
               github.rest.issues.createComment({
                 issue_number: context.issue.number,
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 body: output
               })
             }
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: tf-apply
        if: ${{ inputs.run-apply }} == 'true'
        run: |
          cd ${{ inputs.iac-path }}
          terraform init
          terraform apply -auto-approve
          
          echo "::set-output name=terraform-outputs::$(terraform output -json)"
